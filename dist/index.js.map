{"version":3,"sources":["../src/index.ts","../src/useCases/Mask/index.ts","../src/useCases/Verify/Functions/VerifyAmount.ts","../src/repositories/methods/EmailMethod/index.ts","../src/repositories/methods/CpfMethod/index.ts","../src/repositories/methods/PhoneMethod/index.ts","../src/repositories/methods/UuidMethod/index.ts","../src/repositories/methods/StringMethod/index.ts","../src/repositories/methods/NumberMethod/index.ts","../src/repositories/MethodsRepository.ts","../src/useCases/Verify/Functions/VerifyType.ts","../src/useCases/Verify/index.ts"],"sourcesContent":["import { MaskMethod } from \"./useCases/Mask\";\nimport { MethodsInput } from \"./useCases/types\";\nimport { VerifyMethod } from \"./useCases/Verify\";\n\nclass Axval implements MethodsInput {\n  verify = VerifyMethod;\n  mask = MaskMethod;\n}\n\nexport default new Axval();\n","import { MaskInputDTO, ResponseMaskDTO } from \"./mask.dto\";\r\n\r\nexport const MaskMethod = (input: MaskInputDTO): ResponseMaskDTO => {\r\n  try {\r\n    const { value, mask } = input;\r\n\r\n    let masked = \"\";\r\n    let valueIndex = 0;\r\n\r\n    for (let i = 0; i < mask.length; i++) {\r\n      if (mask[i] === \"0\") {\r\n        masked += value[valueIndex] || \"\"; // Adiciona o valor de value[valueIndex] se existir, caso contrário adiciona uma string vazia\r\n        valueIndex++;\r\n      } else {\r\n        masked += mask[i];\r\n      }\r\n    }\r\n\r\n    let result = masked;\r\n    const regex = /[!@#$%^&*(),.?\":{}|<>;]/;\r\n    let maskedlength = masked.length;\r\n    if (regex.test(masked.charAt(maskedlength - 1))) {\r\n      for (let i = 0; i < value.length; i++) {\r\n        result = masked.substring(0, masked.length - 1);\r\n      }\r\n    }\r\n\r\n    const response = {\r\n      success: true,\r\n      message: \"Máscara aplicada com sucesso\",\r\n      data: result,\r\n    };\r\n\r\n    if (input.onAfterMask) {\r\n      input.onAfterMask(response);\r\n    }\r\n\r\n    return response;\r\n  } catch {\r\n    return {\r\n      success: false,\r\n      message: \"Falha ao aplicar a máscara\",\r\n      data: input.value,\r\n    };\r\n  }\r\n};\r\n","import { TypeVerifyInputDTO } from \"../verify.dto\";\n\nexport const VerifyAmout = (\n  value: string | number,\n  type: TypeVerifyInputDTO,\n  min?: number,\n  max?: number\n) => {\n  if (min) {\n    if (typeof value == \"string\") {\n      if (value.length < min) {\n        return {\n          success: false,\n          message: \"O valor é menor que o mínimo permitido\",\n          type: type,\n        };\n      }\n    }\n    if (typeof value == \"number\") {\n      if (value < min) {\n        return {\n          success: false,\n          message: \"O valor é menor que o mínimo permitido\",\n          type: type,\n        };\n      }\n    }\n  }\n\n  if (max) {\n    if (typeof value == \"string\") {\n      if (value.length > max) {\n        return {\n          success: false,\n          message: \"O valor é maior que o máximo permitido\",\n          type: type,\n        };\n      }\n    }\n    if (typeof value == \"number\") {\n      if (value > max) {\n        return {\n          success: false,\n          message: \"O valor é maior que o máximo permitido\",\n          type: type,\n        };\n      }\n    }\n  }\n};\n","export const EmailMethod = (value: string) => {\n  try {\n    const email = value;\n    const regex = /^[a-z0-9.]+@[a-z0-9]+\\.[a-z]+(\\.[a-z]+)?$/i;\n    if (!regex.test(email)) {\n      return false;\n    }\n    return true;\n  } catch {\n    return false;\n  }\n};\n","export const CpfMethod = (value: string | number) => {\n  try {\n    let cpf = value.toString();\n    cpf = cpf.replace(/[^\\d]+/g, \"\");\n    if (cpf.length !== 11) {\n      return false;\n    }\n\n    for (var i = 0; i < 10; i++) {\n      if (cpf.charAt(i) !== cpf.charAt(i + 1)) {\n        break;\n      }\n      if (i === 9) {\n        return false;\n      }\n    }\n\n    var soma = 0;\n    for (var j = 0; j < 9; j++) {\n      soma += parseInt(cpf.charAt(j)) * (10 - j);\n    }\n    var resto = soma % 11;\n    var digitoVerificador1 = resto < 2 ? 0 : 11 - resto;\n\n    if (parseInt(cpf.charAt(9)) !== digitoVerificador1) {\n      return false;\n    }\n\n    soma = 0;\n    for (var k = 0; k < 10; k++) {\n      soma += parseInt(cpf.charAt(k)) * (11 - k);\n    }\n    resto = soma % 11;\n    var digitoVerificador2 = resto < 2 ? 0 : 11 - resto;\n\n    if (parseInt(cpf.charAt(10)) !== digitoVerificador2) {\n      return false;\n    }\n\n    return true;\n  } catch {\n    return false;\n  }\n};\n","export const PhoneMethod = (value: string) => {\n  try {\n    let numero = value;\n    const numeroLimpo = numero.replace(/\\D/g, \"\");\n    const regex = /^[+]\\d{1,3}\\s?[(]?\\d{1,4}[)]?\\s?\\d{4,}$/;\n    const verify = regex.test(numeroLimpo);\n    if (!verify) {\n      return false;\n    }\n    return true;\n  } catch {\n    return false;\n  }\n};\n","export const UuidMethod = (value: string) => {\n  try {\n    const regex = /^[a-f\\d]{8}(-[a-f\\d]{4}){4}[a-f\\d]{8}$/i;\n    const verify = regex.test(value);\n    if (!verify) {\n      return false;\n    }\n    return true;\n  } catch {\n    return false;\n  }\n};\n","export const StringMethod = (value: string) => {\n  try {\n    if (typeof value === \"string\") {\n      return true;\n    }\n    return false;\n  } catch {\n    return false;\n  }\n};\n","export const NumberMethod = (value: number) => {\n  try {\n    if (typeof value === \"number\") {\n      return true;\n    }\n    return false;\n  } catch {\n    return false;\n  }\n};\n","import { IMethodsRepository } from \"./IMethodsRepository\";\nimport { EmailMethod } from \"./methods/EmailMethod\";\nimport { CpfMethod } from \"./methods/CpfMethod\";\nimport { PhoneMethod } from \"./methods/PhoneMethod\";\nimport { UuidMethod } from \"./methods/UuidMethod\";\nimport { StringMethod } from \"./methods/StringMethod\";\nimport { NumberMethod } from \"./methods/NumberMethod\";\n\nclass MethodsRepository implements IMethodsRepository {\n  email = EmailMethod;\n  phone = PhoneMethod;\n  uuid = UuidMethod;\n  cpf = CpfMethod;\n  string = StringMethod;\n  number = NumberMethod;\n}\n\nexport default new MethodsRepository();\n","import MethodsRepository from \"../../../repositories/MethodsRepository\";\nimport { TypeVerifyInputDTO } from \"../verify.dto\";\n\nexport const VerifyType = (\n  type: TypeVerifyInputDTO,\n  value: string | number\n) => {\n  let verify;\n  let count = 0;\n\n  if (\n    typeof value === \"string\" &&\n    (type == \"email\" || (typeof type === \"object\" && type.field === \"email\"))\n  ) {\n    verify = MethodsRepository.email(value);\n    count = verify ? count + 1 : count;\n  }\n\n  if (\n    typeof value === \"string\" &&\n    (type == \"phone\" || (typeof type === \"object\" && type.field === \"phone\"))\n  ) {\n    verify = MethodsRepository.phone(value);\n    count = verify ? count + 1 : count;\n  }\n\n  if (type == \"cpf\" || (typeof type === \"object\" && type.field === \"cpf\")) {\n    verify = MethodsRepository.cpf(value);\n    count = verify ? count + 1 : count;\n  }\n\n  if (\n    typeof value === \"string\" &&\n    (type == \"uuid\" || (typeof type === \"object\" && type.field === \"uuid\"))\n  ) {\n    verify = MethodsRepository.uuid(value);\n    count = verify ? count + 1 : count;\n  }\n\n  if (\n    typeof value === \"number\" &&\n    (type == \"number\" ||\n      (typeof type === \"object\" && type.format === 'number'))\n  ) {\n    verify = MethodsRepository.number(value);\n    count = verify ? count + 1 : count;\n  }\n\n  if (\n    typeof value === \"string\" &&\n    (type == \"string\" ||\n      (typeof type === \"object\" && type.format === \"string\"))\n  ) {\n    verify = MethodsRepository.string(value);\n    count = verify ? count + 1 : count;\n  }\n\n  if (typeof type === \"object\") {\n    if (Object.keys(type).length != count) {\n      verify = false;\n    }\n  }\n\n  return verify;\n};\n","import { VerifyAmout } from \"./Functions/VerifyAmount\";\nimport { VerifyType } from \"./Functions/VerifyType\";\nimport { ResponseVerifyDTO, VerifyInputDTO } from \"./verify.dto\";\n\nexport const VerifyMethod = (input: VerifyInputDTO): ResponseVerifyDTO => {\n  try {\n    let verify = VerifyType(input.type, input.value);\n    let amount = VerifyAmout(input.value, input.type, input.min, input.max);\n\n    if (amount) {\n      return amount;\n    }\n\n    if (verify) {\n      return { success: true, message: \"O valor é válido\", type: input.type };\n    }\n\n    return { success: false, message: \"O valor é inválido\", type: input.type };\n  } catch {\n    return { success: false, message: \"Error\", type: input.type };\n  }\n};\n"],"mappings":"yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GCEO,IAAMI,EAAcC,GAAyC,CAClE,GAAI,CACF,GAAM,CAAE,MAAAC,EAAO,KAAAC,CAAK,EAAIF,EAEpBG,EAAS,GACTC,EAAa,EAEjB,QAASC,EAAI,EAAGA,EAAIH,EAAK,OAAQG,IAC3BH,EAAKG,CAAC,IAAM,KACdF,GAAUF,EAAMG,CAAU,GAAK,GAC/BA,KAEAD,GAAUD,EAAKG,CAAC,EAIpB,IAAIC,EAASH,EACPI,EAAQ,0BACVC,EAAeL,EAAO,OAC1B,GAAII,EAAM,KAAKJ,EAAO,OAAOK,EAAe,CAAC,CAAC,EAC5C,QAASH,EAAI,EAAGA,EAAIJ,EAAM,OAAQI,IAChCC,EAASH,EAAO,UAAU,EAAGA,EAAO,OAAS,CAAC,EAIlD,IAAMM,EAAW,CACf,QAAS,GACT,QAAS,kCACT,KAAMH,CACR,EAEA,OAAIN,EAAM,aACRA,EAAM,YAAYS,CAAQ,EAGrBA,CACT,OAAQC,EAAN,CACA,MAAO,CACL,QAAS,GACT,QAAS,gCACT,KAAMV,EAAM,KACd,CACF,CACF,EC3CO,IAAMW,EAAc,CACzBC,EACAC,EACAC,EACAC,IACG,CACH,GAAID,EAAK,CACP,GAAI,OAAOF,GAAS,UACdA,EAAM,OAASE,EACjB,MAAO,CACL,QAAS,GACT,QAAS,+CACT,KAAMD,CACR,EAGJ,GAAI,OAAOD,GAAS,UACdA,EAAQE,EACV,MAAO,CACL,QAAS,GACT,QAAS,+CACT,KAAMD,CACR,EAKN,GAAIE,EAAK,CACP,GAAI,OAAOH,GAAS,UACdA,EAAM,OAASG,EACjB,MAAO,CACL,QAAS,GACT,QAAS,+CACT,KAAMF,CACR,EAGJ,GAAI,OAAOD,GAAS,UACdA,EAAQG,EACV,MAAO,CACL,QAAS,GACT,QAAS,+CACT,KAAMF,CACR,EAIR,ECjDO,IAAMG,EAAeC,GAAkB,CAC5C,GAAI,CACF,IAAMC,EAAQD,EAEd,MAAK,EADS,6CACH,KAAKC,CAAK,CAIvB,OAAQC,EAAN,CACA,MAAO,EACT,CACF,ECXO,IAAMC,EAAaC,GAA2B,CACnD,GAAI,CACF,IAAIC,EAAMD,EAAM,SAAS,EAEzB,GADAC,EAAMA,EAAI,QAAQ,UAAW,EAAE,EAC3BA,EAAI,SAAW,GACjB,MAAO,GAGT,QAASC,EAAI,EAAGA,EAAI,IACdD,EAAI,OAAOC,CAAC,IAAMD,EAAI,OAAOC,EAAI,CAAC,EADhBA,IAItB,GAAIA,IAAM,EACR,MAAO,GAKX,QADIC,EAAO,EACFC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,GAAQ,SAASF,EAAI,OAAOG,CAAC,CAAC,GAAK,GAAKA,GAE1C,IAAIC,EAAQF,EAAO,GACfG,EAAqBD,EAAQ,EAAI,EAAI,GAAKA,EAE9C,GAAI,SAASJ,EAAI,OAAO,CAAC,CAAC,IAAMK,EAC9B,MAAO,GAGTH,EAAO,EACP,QAASI,EAAI,EAAGA,EAAI,GAAIA,IACtBJ,GAAQ,SAASF,EAAI,OAAOM,CAAC,CAAC,GAAK,GAAKA,GAE1CF,EAAQF,EAAO,GACf,IAAIK,EAAqBH,EAAQ,EAAI,EAAI,GAAKA,EAE9C,OAAI,SAASJ,EAAI,OAAO,EAAE,CAAC,IAAMO,CAKnC,OAAQC,EAAN,CACA,MAAO,EACT,CACF,EC3CO,IAAMC,EAAeC,GAAkB,CAC5C,GAAI,CAEF,IAAMC,EADOD,EACc,QAAQ,MAAO,EAAE,EAG5C,MADe,EADD,0CACO,KAAKC,CAAW,CAKvC,OAAQC,EAAN,CACA,MAAO,EACT,CACF,ECbO,IAAMC,EAAcC,GAAkB,CAC3C,GAAI,CAGF,MADe,EADD,0CACO,KAAKA,CAAK,CAKjC,OAAQC,EAAN,CACA,MAAO,EACT,CACF,ECXO,IAAMC,EAAgBC,GAAkB,CAC7C,GAAI,CACF,OAAI,OAAOA,GAAU,QAIvB,OAAQC,EAAN,CACA,MAAO,EACT,CACF,ECTO,IAAMC,EAAgBC,GAAkB,CAC7C,GAAI,CACF,OAAI,OAAOA,GAAU,QAIvB,OAAQC,EAAN,CACA,MAAO,EACT,CACF,ECDA,IAAMC,EAAN,KAAsD,CAAtD,cACE,WAAQC,EACR,WAAQC,EACR,UAAOC,EACP,SAAMC,EACN,YAASC,EACT,YAASC,EACX,EAEOC,EAAQ,IAAIP,ECdZ,IAAMQ,EAAa,CACxBC,EACAC,IACG,CACH,IAAIC,EACAC,EAAQ,EAEZ,OACE,OAAOF,GAAU,WAChBD,GAAQ,SAAY,OAAOA,GAAS,UAAYA,EAAK,QAAU,WAEhEE,EAASE,EAAkB,MAAMH,CAAK,EACtCE,EAAQD,EAASC,EAAQ,EAAIA,GAI7B,OAAOF,GAAU,WAChBD,GAAQ,SAAY,OAAOA,GAAS,UAAYA,EAAK,QAAU,WAEhEE,EAASE,EAAkB,MAAMH,CAAK,EACtCE,EAAQD,EAASC,EAAQ,EAAIA,IAG3BH,GAAQ,OAAU,OAAOA,GAAS,UAAYA,EAAK,QAAU,SAC/DE,EAASE,EAAkB,IAAIH,CAAK,EACpCE,EAAQD,EAASC,EAAQ,EAAIA,GAI7B,OAAOF,GAAU,WAChBD,GAAQ,QAAW,OAAOA,GAAS,UAAYA,EAAK,QAAU,UAE/DE,EAASE,EAAkB,KAAKH,CAAK,EACrCE,EAAQD,EAASC,EAAQ,EAAIA,GAI7B,OAAOF,GAAU,WAChBD,GAAQ,UACN,OAAOA,GAAS,UAAYA,EAAK,SAAW,YAE/CE,EAASE,EAAkB,OAAOH,CAAK,EACvCE,EAAQD,EAASC,EAAQ,EAAIA,GAI7B,OAAOF,GAAU,WAChBD,GAAQ,UACN,OAAOA,GAAS,UAAYA,EAAK,SAAW,YAE/CE,EAASE,EAAkB,OAAOH,CAAK,EACvCE,EAAQD,EAASC,EAAQ,EAAIA,GAG3B,OAAOH,GAAS,UACd,OAAO,KAAKA,CAAI,EAAE,QAAUG,IAC9BD,EAAS,IAINA,CACT,EC5DO,IAAMG,EAAgBC,GAA6C,CACxE,GAAI,CACF,IAAIC,EAASC,EAAWF,EAAM,KAAMA,EAAM,KAAK,EAC3CG,EAASC,EAAYJ,EAAM,MAAOA,EAAM,KAAMA,EAAM,IAAKA,EAAM,GAAG,EAEtE,OAAIG,IAIAF,EACK,CAAE,QAAS,GAAM,QAAS,yBAAoB,KAAMD,EAAM,IAAK,EAGjE,CAAE,QAAS,GAAO,QAAS,2BAAsB,KAAMA,EAAM,IAAK,EAC3E,OAAQK,EAAN,CACA,MAAO,CAAE,QAAS,GAAO,QAAS,QAAS,KAAML,EAAM,IAAK,CAC9D,CACF,EXjBA,IAAMM,EAAN,KAAoC,CAApC,cACE,YAASC,EACT,UAAOC,EACT,EAEOC,EAAQ,IAAIH","names":["src_exports","__export","src_default","__toCommonJS","MaskMethod","input","value","mask","masked","valueIndex","i","result","regex","maskedlength","response","e","VerifyAmout","value","type","min","max","EmailMethod","value","email","e","CpfMethod","value","cpf","i","soma","j","resto","digitoVerificador1","k","digitoVerificador2","e","PhoneMethod","value","numeroLimpo","e","UuidMethod","value","e","StringMethod","value","e","NumberMethod","value","e","MethodsRepository","EmailMethod","PhoneMethod","UuidMethod","CpfMethod","StringMethod","NumberMethod","MethodsRepository_default","VerifyType","type","value","verify","count","MethodsRepository_default","VerifyMethod","input","verify","VerifyType","amount","VerifyAmout","e","Axval","VerifyMethod","MaskMethod","src_default"]}