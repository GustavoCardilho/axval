{"version":3,"sources":["../../src/repositories/methods/EmailMethod/index.ts","../../src/repositories/methods/CpfMethod/index.ts","../../src/repositories/methods/PhoneMethod/index.ts","../../src/repositories/methods/UuidMethod/index.ts","../../src/repositories/MethodsRepository.ts","../../src/useCases/Verify/index.ts","../../src/index.ts"],"sourcesContent":["export const EmailMethod = (value: string) => {\r\n  try {\r\n    const email = value;\r\n    const regex = /^[a-z0-9.]+@[a-z0-9]+\\.[a-z]+(\\.[a-z]+)?$/i;\r\n    if (!regex.test(email)) {\r\n      return false;\r\n    }\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n","export const CpfMethod = (value: string) => {\r\n  try {\r\n    let cpf = value;\r\n    cpf = cpf.replace(/[^\\d]+/g, \"\");\r\n    if (cpf.length !== 11) {\r\n      return false;\r\n    }\r\n\r\n    for (var i = 0; i < 10; i++) {\r\n      if (cpf.charAt(i) !== cpf.charAt(i + 1)) {\r\n        break;\r\n      }\r\n      if (i === 9) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    var soma = 0;\r\n    for (var j = 0; j < 9; j++) {\r\n      soma += parseInt(cpf.charAt(j)) * (10 - j);\r\n    }\r\n    var resto = soma % 11;\r\n    var digitoVerificador1 = resto < 2 ? 0 : 11 - resto;\r\n\r\n    if (parseInt(cpf.charAt(9)) !== digitoVerificador1) {\r\n      return false;\r\n    }\r\n\r\n    soma = 0;\r\n    for (var k = 0; k < 10; k++) {\r\n      soma += parseInt(cpf.charAt(k)) * (11 - k);\r\n    }\r\n    resto = soma % 11;\r\n    var digitoVerificador2 = resto < 2 ? 0 : 11 - resto;\r\n\r\n    if (parseInt(cpf.charAt(10)) !== digitoVerificador2) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n","export const PhoneMethod = (value: string) => {\r\n  try {\r\n    let numero = value;\r\n    const numeroLimpo = numero.replace(/\\D/g, \"\");\r\n    const regex = /^[+]\\d{1,3}\\s?[(]?\\d{1,4}[)]?\\s?\\d{4,}$/;\r\n    const verify = regex.test(numeroLimpo);\r\n    if (!verify) {\r\n      return false;\r\n    }\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n","export const UuidMethod = (value: string) => {\r\n  try {\r\n    const regex = /^[a-f\\d]{8}(-[a-f\\d]{4}){4}[a-f\\d]{8}$/i;\r\n    const verify = regex.test(value);\r\n    if (!verify) {\r\n      return false;\r\n    }\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n","import { IMethodsRepository } from \"./IMethodsRepository\";\r\nimport { EmailMethod } from \"./methods/EmailMethod\";\r\nimport { CpfMethod } from \"./methods/CpfMethod\";\r\nimport { PhoneMethod } from \"./methods/PhoneMethod\";\r\nimport { UuidMethod } from \"./methods/UuidMethod\";\r\n\r\nclass MethodsRepository implements IMethodsRepository {\r\n  email = EmailMethod;\r\n  phone = PhoneMethod;\r\n  uuid = UuidMethod;\r\n  cpf = CpfMethod;\r\n}\r\n\r\nexport default new MethodsRepository();\r\n","import MethodsRepository from \"../../repositories/MethodsRepository\";\r\nimport { ResponseVerifyDTO, VerifyInputDTO } from \"./verify.dto\";\r\n\r\nexport const VerifyMethod = (input: VerifyInputDTO): ResponseVerifyDTO => {\r\n  try {\r\n    let verify;\r\n    if (input.type == \"email\" && typeof input.value == \"string\") {\r\n      verify = MethodsRepository.email(input.value);\r\n    }\r\n    if (input.type == \"phone\" && typeof input.value == \"string\") {\r\n      verify = MethodsRepository.phone(input.value);\r\n    }\r\n    if (input.type == \"cpf\" && typeof input.value == \"string\") {\r\n      verify = MethodsRepository.cpf(input.value);\r\n    }\r\n    if (input.type == \"uuid\" && typeof input.value == \"string\") {\r\n      verify = MethodsRepository.uuid(input.value);\r\n    }\r\n\r\n    if (input.min) {\r\n      if (typeof input.value == \"string\") {\r\n        if (input.value.length < input.min) {\r\n          return {\r\n            success: false,\r\n            message: \"O valor é menor que o mínimo permitido\",\r\n            type: input.type,\r\n          };\r\n        }\r\n      }\r\n      if (typeof input.value == \"number\") {\r\n        if (input.value < input.min) {\r\n          return {\r\n            success: false,\r\n            message: \"O valor é menor que o mínimo permitido\",\r\n            type: input.type,\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    if (input.max) {\r\n      if (typeof input.value == \"string\") {\r\n        if (input.value.length > input.max) {\r\n          return {\r\n            success: false,\r\n            message: \"O valor é maior que o máximo permitido\",\r\n            type: input.type,\r\n          };\r\n        }\r\n      }\r\n      if (typeof input.value == \"number\") {\r\n        if (input.value > input.max) {\r\n          return {\r\n            success: false,\r\n            message: \"O valor é maior que o máximo permitido\",\r\n            type: input.type,\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    if (verify) {\r\n      return { success: true, message: \"O valor é válido\", type: input.type };\r\n    }\r\n\r\n    return { success: false, message: \"O valor é inválido\", type: input.type };\r\n  } catch {\r\n    return { success: false, message: \"Error\", type: input.type };\r\n  }\r\n};\r\n","import { MethodsInput } from \"./useCases/types\";\r\nimport { VerifyMethod } from \"./useCases/Verify\";\r\n\r\nclass Axval implements MethodsInput {\r\n  verify = VerifyMethod;\r\n}\r\n\r\nexport default new Axval();\r\n"],"mappings":"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","names":["EmailMethod","value","email","e","CpfMethod","value","cpf","i","soma","j","resto","digitoVerificador1","k","digitoVerificador2","e","PhoneMethod","value","numeroLimpo","e","UuidMethod","value","e","MethodsRepository","EmailMethod","PhoneMethod","UuidMethod","CpfMethod","MethodsRepository_default","VerifyMethod","input","verify","MethodsRepository_default","e","Axval","VerifyMethod","src_default"]}