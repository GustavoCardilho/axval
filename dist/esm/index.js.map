{"version":3,"sources":["../../src/useCases/Verify/components/VerifyAmount.ts","../../src/repositories/methods/EmailMethod/index.ts","../../src/repositories/methods/CpfMethod/index.ts","../../src/repositories/methods/PhoneMethod/index.ts","../../src/repositories/methods/UuidMethod/index.ts","../../src/repositories/methods/StringMethod/index.ts","../../src/repositories/methods/NumberMethod/index.ts","../../src/repositories/MethodsRepository.ts","../../src/useCases/Verify/components/VerifyType.ts","../../src/useCases/Verify/index.ts","../../src/index.ts"],"sourcesContent":["import { TypeVerifyInputDTO } from \"../verify.dto\";\r\n\r\nexport const VerifyAmout = (\r\n  value: string | number,\r\n  type: TypeVerifyInputDTO,\r\n  min?: number,\r\n  max?: number\r\n) => {\r\n  if (min) {\r\n    if (typeof value == \"string\") {\r\n      if (value.length < min) {\r\n        return {\r\n          success: false,\r\n          message: \"O valor é menor que o mínimo permitido\",\r\n          type: type,\r\n        };\r\n      }\r\n    }\r\n    if (typeof value == \"number\") {\r\n      if (value < min) {\r\n        return {\r\n          success: false,\r\n          message: \"O valor é menor que o mínimo permitido\",\r\n          type: type,\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  if (max) {\r\n    if (typeof value == \"string\") {\r\n      if (value.length > max) {\r\n        return {\r\n          success: false,\r\n          message: \"O valor é maior que o máximo permitido\",\r\n          type: type,\r\n        };\r\n      }\r\n    }\r\n    if (typeof value == \"number\") {\r\n      if (value > max) {\r\n        return {\r\n          success: false,\r\n          message: \"O valor é maior que o máximo permitido\",\r\n          type: type,\r\n        };\r\n      }\r\n    }\r\n  }\r\n};\r\n","export const EmailMethod = (value: string) => {\r\n  try {\r\n    const email = value;\r\n    const regex = /^[a-z0-9.]+@[a-z0-9]+\\.[a-z]+(\\.[a-z]+)?$/i;\r\n    if (!regex.test(email)) {\r\n      return false;\r\n    }\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n","export const CpfMethod = (value: string | number) => {\r\n  try {\r\n    let cpf = value.toString();\r\n    cpf = cpf.replace(/[^\\d]+/g, \"\");\r\n    if (cpf.length !== 11) {\r\n      return false;\r\n    }\r\n\r\n    for (var i = 0; i < 10; i++) {\r\n      if (cpf.charAt(i) !== cpf.charAt(i + 1)) {\r\n        break;\r\n      }\r\n      if (i === 9) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    var soma = 0;\r\n    for (var j = 0; j < 9; j++) {\r\n      soma += parseInt(cpf.charAt(j)) * (10 - j);\r\n    }\r\n    var resto = soma % 11;\r\n    var digitoVerificador1 = resto < 2 ? 0 : 11 - resto;\r\n\r\n    if (parseInt(cpf.charAt(9)) !== digitoVerificador1) {\r\n      return false;\r\n    }\r\n\r\n    soma = 0;\r\n    for (var k = 0; k < 10; k++) {\r\n      soma += parseInt(cpf.charAt(k)) * (11 - k);\r\n    }\r\n    resto = soma % 11;\r\n    var digitoVerificador2 = resto < 2 ? 0 : 11 - resto;\r\n\r\n    if (parseInt(cpf.charAt(10)) !== digitoVerificador2) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n","export const PhoneMethod = (value: string) => {\r\n  try {\r\n    let numero = value;\r\n    const numeroLimpo = numero.replace(/\\D/g, \"\");\r\n    const regex = /^[+]\\d{1,3}\\s?[(]?\\d{1,4}[)]?\\s?\\d{4,}$/;\r\n    const verify = regex.test(numeroLimpo);\r\n    if (!verify) {\r\n      return false;\r\n    }\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n","export const UuidMethod = (value: string) => {\r\n  try {\r\n    const regex = /^[a-f\\d]{8}(-[a-f\\d]{4}){4}[a-f\\d]{8}$/i;\r\n    const verify = regex.test(value);\r\n    if (!verify) {\r\n      return false;\r\n    }\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n","export const StringMethod = (value: string) => {\r\n  try {\r\n    if (typeof value === \"string\") {\r\n      return true;\r\n    }\r\n    return false;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n","export const NumberMethod = (value: number) => {\r\n  try {\r\n    if (typeof value === \"number\") {\r\n      return true;\r\n    }\r\n    return false;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n","import { IMethodsRepository } from \"./IMethodsRepository\";\r\nimport { EmailMethod } from \"./methods/EmailMethod\";\r\nimport { CpfMethod } from \"./methods/CpfMethod\";\r\nimport { PhoneMethod } from \"./methods/PhoneMethod\";\r\nimport { UuidMethod } from \"./methods/UuidMethod\";\r\nimport { StringMethod } from \"./methods/StringMethod\";\r\nimport { NumberMethod } from \"./methods/NumberMethod\";\r\n\r\nclass MethodsRepository implements IMethodsRepository {\r\n  email = EmailMethod;\r\n  phone = PhoneMethod;\r\n  uuid = UuidMethod;\r\n  cpf = CpfMethod;\r\n  string = StringMethod;\r\n  number = NumberMethod;\r\n}\r\n\r\nexport default new MethodsRepository();\r\n","import MethodsRepository from \"../../../repositories/MethodsRepository\";\r\nimport { TypeVerifyInputArray } from \"../verify.dto\";\r\n\r\nexport const VerifyType = (\r\n  type: string | TypeVerifyInputArray,\r\n  value: string | number\r\n) => {\r\n  let verify;\r\n  let count = 0\r\n\r\n  if (typeof value === 'string' && (type == \"email\" || (Array.isArray(type) && type.indexOf(\"email\") !== -1))) {\r\n    verify = MethodsRepository.email(value);\r\n    count = verify ? count + 1 : count;\r\n  }\r\n  if (typeof value === 'string' && (type == \"phone\" || (Array.isArray(type) && type.indexOf(\"phone\") !== -1))) {\r\n    verify = MethodsRepository.phone(value);\r\n    count = verify ? count + 1 : count;\r\n  }\r\n  if (type == \"cpf\" || (Array.isArray(type) && type.indexOf(\"cpf\") !== -1)) {\r\n    verify = MethodsRepository.cpf(value);\r\n    count = verify ? count + 1 : count;\r\n  }\r\n  if (typeof value === 'string' && (type == \"uuid\" || (Array.isArray(type)  && type.indexOf(\"uuid\") !== -1))) {\r\n    verify = MethodsRepository.uuid(value);\r\n    count = verify ? count + 1 : count;\r\n  }\r\n  if (typeof value === 'number' && (type == \"number\" || (Array.isArray(type)  && type.indexOf(\"number\") !== -1))) {\r\n    verify = MethodsRepository.number(value);\r\n    count = verify ? count + 1 : count;\r\n  }\r\n  if (typeof value === 'string' && (type == \"string\" || (Array.isArray(type)  && type.indexOf(\"string\") !== -1))) {\r\n    verify = MethodsRepository.string(value);\r\n    count = verify ? count + 1 : count;\r\n  }\r\n\r\n  if(Array.isArray(type) && count !== type.length) {\r\n    console.log(type.length, count)\r\n    verify = false\r\n  }\r\n\r\n  return verify;\r\n};\r\n","import { VerifyAmout } from \"./components/VerifyAmount\";\r\nimport { VerifyType } from \"./components/VerifyType\";\r\nimport { ResponseVerifyDTO, VerifyInputDTO } from \"./verify.dto\";\r\n\r\nexport const VerifyMethod = (input: VerifyInputDTO): ResponseVerifyDTO => {\r\n  try {\r\n    let verify = VerifyType(input.type, input.value);\r\n    let amount = VerifyAmout(input.value, input.type, input.min, input.max);\r\n\r\n    if (amount) {\r\n      return amount;\r\n    }\r\n\r\n    if (verify) {\r\n      return { success: true, message: \"O valor é válido\", type: input.type };\r\n    }\r\n\r\n    return { success: false, message: \"O valor é inválido\", type: input.type };\r\n  } catch {\r\n    return { success: false, message: \"Error\", type: input.type };\r\n  }\r\n};\r\n","import { MethodsInput } from \"./useCases/types\";\r\nimport { VerifyMethod } from \"./useCases/Verify\";\r\n\r\nclass Axval implements MethodsInput {\r\n  verify = VerifyMethod;\r\n}\r\n\r\nexport default new Axval();\r\n"],"mappings":"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","names":["VerifyAmout","value","type","min","max","EmailMethod","value","email","CpfMethod","value","cpf","i","soma","j","resto","digitoVerificador1","k","digitoVerificador2","e","PhoneMethod","value","numeroLimpo","UuidMethod","value","StringMethod","value","NumberMethod","value","MethodsRepository","EmailMethod","PhoneMethod","UuidMethod","CpfMethod","StringMethod","NumberMethod","MethodsRepository_default","VerifyType","type","value","verify","count","MethodsRepository_default","VerifyMethod","input","verify","VerifyType","amount","VerifyAmout","Axval","VerifyMethod","src_default"]}